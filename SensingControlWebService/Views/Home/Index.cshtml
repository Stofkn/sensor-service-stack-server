@{
    ViewBag.Title = "Dashboard";
}

<!-- Twitter Bootstrap Tabs -->
<ul id="dashboardTab" class="nav nav-tabs">
    <li class="active"><a href="#dashboard">Dashboard</a></li>
    <li><a href="#temperature">Temperature</a></li>
    <li><a href="#humidity">Humidity</a></li>
    <li><a href="#co2">CO₂</a></li>
    <li><a href="#notifications">Notifications</a></li>
</ul>

<!-- Dashboard grid with tiles, created with gridster.js -->
<div class="tab-content">
    <div class="tab-pane fade in active" id="dashboard">
        <div id="dashboard-grid" class="gridster">
            <ul>
                <li data-row="1" data-col="1" data-sizex="2" data-sizey="2" class="bg-pink">
                    <div class="widget">
                        <div id="temperatureMeter" style="width: 270px; height: 235px"></div>
                    </div>
                </li>
 
                <li data-row="1" data-col="3" data-sizex="2" data-sizey="2" class="bg-blue">
                    <div class="widget">
                        <div id="humidityMeter" style="width: 270px; height: 235px"></div>
                    </div>
                </li>

                <li data-row="1" data-col="5" data-sizex="2" data-sizey="2" class="bg-greenLight">
                    <div class="widget">
                        <div id="co2Meter" style="width: 270px; height: 235px"></div>
                    </div>
                </li>
            </ul>
        </div>
    </div>
    
    <!-- Highchart solid gauges with last measurement from each sensor. -->
    <div class="tab-pane fade" id="temperature">
        <div id="temperatureChart" class="chart"></div>
    </div>

    <div class="tab-pane fade" id="humidity">
        <div id="humidityChart" class="chart"></div>
    </div>

    <div class="tab-pane fade" id="co2">
        <div id="co2Chart" class="chart"></div>
    </div>
    
    <!-- Notification settings form -->
    <div class="tab-pane fade" id="notifications">
        <div id="settings">
            <form id="settingsForm" role="form">
                <h3>Notification settings</h3>
                <div id="SuccessAlert" class="alert alert-success">
                    <strong>Success!</strong> Settings saved successfully!
                </div>
                
                <div id="ErrorAlert" class="alert alert-danger">
                    <strong>Error!</strong> Make sure all data is correct.
                </div>
                
                <div class="form-group">
                    <label for="TemperatureAlertLimit">Temperature Limit(°C)</label>
                    <input type="number" class="form-control" id="TemperatureAlertLimit" placeholder="Notify when temperature reached X °C.">
                </div>

                <div class="form-group">
                    <label for="HumidityAlertLimit">Humidity Limit (%)</label>
                    <input type="number" class="form-control" id="HumidityAlertLimit" placeholder="Notify when humidity reached X %.">
                </div>

                <div class="form-group">
                    <label for="Co2AlertLimit" >CO₂ Limit (ppm)</label>
                    <input type="number" class="form-control" id="Co2AlertLimit" placeholder="Notify when CO₂ reached X ppm.">
                </div>

                <div class="form-group">
                    <label for="PushalotAuthorizationToken">Pushalot Authorization Token</label>
                    <input type="text" class="form-control" id="PushalotAuthorizationToken" placeholder="Pushalot Authorization Token">
                </div>
                
                <div class="form-group">
                    <label for="Password">Password</label>
                    <input type="password" class="form-control" id="Password" placeholder="Password">
                </div>

                <div class="checkbox">
                    <label>
                        <input type="checkbox" id="EnableNotifications" checked> Enable notifications
                    </label>
                </div>

                <button type="submit" class="btn btn-default max-width">Save</button>
            </form>

        </div>
    </div>
</div>

@section scripts {
    <script src="~/Scripts/jquery.signalR-2.0.0.min.js"></script>
    <!--Reference the autogenerated SignalR hub script. -->
    <script src="~/signalr/hubs"></script>

    <script>
        $(function() {
            var $temperatureAlertLimit = $('#TemperatureAlertLimit'),
                $humidityAlertLimit = $('#HumidityAlertLimit'),
                $co2AlertLimit = $('#Co2AlertLimit'),
                $enableNotifications = $('#EnableNotifications'),
                $successAlert = $('#SuccessAlert'),
                $errorAlert = $('#ErrorAlert');
            
            $successAlert.hide();
            $errorAlert.hide();
            
            // Submit form with ajax, TODO: use Marionette and Backbone
            $('#settingsForm').submit(function(event) {
                event.preventDefault();
                var data = {
                    TemperatureAlertLimit: $temperatureAlertLimit.val(),
                    HumidityAlertLimit: $humidityAlertLimit.val(),
                    Co2AlertLimit: $co2AlertLimit.val(),
                    PushalotAuthorizationToken: $('#PushalotAuthorizationToken').val(),
                    Password: $('#Password').val(),
                    EnableNotifications: $enableNotifications.prop('checked')
                };

                // Hide alert boxes.
                $successAlert.hide();
                $errorAlert.hide();
                
                // Post new settings via ajax.
                $.post('api/settings?format=json', data, function (d) {
                    if (d.responseStatus && d.responseStatus.errorCode == '400') {
                        $errorAlert.show();
                    } else {
                        $successAlert.show();
                    }
                });
            });
            
            // Load current settings into form.
            $.get('api/settings?format=json', function (d) {
                $temperatureAlertLimit.val(d.temperatureAlertLimit);
                $humidityAlertLimit.val(d.humidityAlertLimit);
                $co2AlertLimit.val(d.co2AlertLimit);
                $enableNotifications.prop('checked', d.enableNotifications);
            });

            // Create drag-drop grid of tiles with measurements from sensors.
            $(".gridster ul").gridster({
                widget_margins: [10, 10],
                widget_base_dimensions: [140, 140]
            });

            // Change from tab
            $('#dashboardTab a').click(function(e) {
                e.preventDefault();
                $(this).tab('show');
            });

            // Initialize chart
            Highcharts.setOptions({
                global: {
                    useUTC: false,
                },
                theme: {
                    contrastTextColor: 'white'
                }
            });

            ////////////////////////////////////////////////////
            // See sensingcontrol.js in Scripts folder
            ////////////////////////////////////////////////////
            
            // Initialize meters
            createMeter('#temperatureMeter', 'Temperature', '°C', @ViewBag.lastTemperature, -20, 50, '#662b4c'); // purpleDark
            createMeter('#humidityMeter', 'Humidity', '%', @ViewBag.lastHumidity, 0, 100, '#2b5797'); // blueDark
            createMeter('#co2Meter', 'CO₂', 'ppm', @ViewBag.lastCo2, 0, 1200, '#1e7145'); // greenDark

            // Initialize charts
            createChart('#temperatureChart', '#temperatureMeter', 'Temperature', 'Temperature', $.connection.temperatureHub, '°C');
            createChart('#humidityChart', '#humidityMeter', 'Humidity', 'Humidity', $.connection.humidityHub, '%');
            createChart('#co2Chart', '#co2Meter', 'CO2', 'CO₂', $.connection.co2Hub, 'ppm');
        });
    </script>
}